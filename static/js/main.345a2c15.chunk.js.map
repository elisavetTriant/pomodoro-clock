{"version":3,"sources":["components/PomodoroControl.js","App.js","utils/helpers.js","reportWebVitals.js","index.js"],"names":["PomodoroControl","type","length","changeTime","className","id","onClick","App","useState","displayTime","setDisplayTime","breakTime","setBreakTime","sessionTime","setSessionTime","timerOn","setTimerOn","onBreak","setOnBreak","myAudio","useRef","displayTimerRef","timeoutRef","onBreakRef","displayVisualTimerRef","beginCountDown","timeOutInfo","fn","time","nextAt","timeout","wrapper","Date","getTime","setTimeout","cancel","clearTimeout","timeoutID","accurateInterval","phaseControl","current","prev","previousState","playBuzzer","isBreak","currentTick","percentage","Math","abs","console","log","displayElapsedPercentage","timeAmmount","formatTime","minutes","floor","seconds","ceil","currentTime","play","Fragment","ref","style","height","pause","preload","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.345a2c15.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction PomodoroControl({ type, length, changeTime }) {\r\n\r\nreturn (\r\n\t<div className={`${type}Ctrl`}>\r\n\t\t<p id={`${type}-label`}>{type} length</p>\r\n\t\t<button id={`${type}-decrement`} className=\"minus\" onClick = {()=> changeTime(-60, type)}>-</button>\r\n\t\t<span id={`${type}-length`} className=\"time\">{length}</span>\r\n\t\t<button id={`${type}-increment`} className=\"plus\" onClick = {()=> changeTime(60, type)}>+</button>\r\n\t </div>\r\n  )\r\n\r\n}\r\n\r\nexport default PomodoroControl;","import React, { useState, useRef } from \"react\";\nimport PomodoroControl from \"./components/PomodoroControl\"\nimport {accurateInterval} from \"./utils/helpers.js\"\nimport './App.css';\n\n\nfunction App() {\n  const [displayTime, setDisplayTime] = useState(60*25);\n  const [breakTime, setBreakTime] = useState(60*5);\n  const [sessionTime, setSessionTime] = useState(60*25);\n  const [timerOn, setTimerOn] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n  const myAudio = useRef();\n  const displayTimerRef = useRef();\n  const timeoutRef = useRef();\n  const onBreakRef = useRef(null);\n  const displayVisualTimerRef = useRef();\n\n  //do the countdown\n  const timerControl = () => {\n    if (!timerOn) {\n      setTimerOn(true);\n      beginCountDown();\n    } else if (timeoutRef.current.timeoutID) {      \n        timeoutRef.current.cancel();\n        setTimerOn(false);\n    }\n  }\n\n\n  const beginCountDown = () => { \n    let timeOutInfo = accurateInterval(() => {\n          phaseControl()\n        }, 1000)\n    timeoutRef.current = timeOutInfo\n    //console.log(timeoutRef.current.timeoutID)\n  }\n  \n  const displayElapsedPercentage = (isBreak, currentTick) => {\n    let percentage = \"0%\"\n    if (isBreak) {\n      percentage = Math.abs(((currentTick - breakTime) / breakTime) * 100) + '%'\n    }else {\n      percentage = Math.abs(((currentTick - sessionTime) / sessionTime) * 100) + '%'\n    }\n    displayVisualTimerRef.current = percentage;\n    console.log(displayVisualTimerRef.current);\n  }\n\n\n  const phaseControl = () => {\n      let time;     \n\n      setDisplayTime((prev) => {\n        displayTimerRef.current = prev\n        return prev - 1\n      });\n      \n      time = displayTimerRef.current;\n      //console.log(time)\n\n      if (time <= 0) {\n\n       setOnBreak((prev) => {\n        let previousState = prev\n        onBreakRef.current = !previousState\n        return !prev\n       })\n\n       if (timeoutRef.current) {\n            timeoutRef.current.cancel()\n            //console.log(\"canceled\")\n\n            if (onBreakRef.current === false) {\n              //console.log(\"sessionTime\" + sessionTime);\n              displayTimerRef.current = sessionTime;\n              playBuzzer()\n            } else if (onBreakRef.current === true){\n              //console.log(\"breaktime:\" + breakTime);\n              displayTimerRef.current = breakTime;\n              playBuzzer()\n            }\n\n            setDisplayTime(displayTimerRef.current)\n            \n            beginCountDown()\n\n        }\n      }\n\n      displayElapsedPercentage(onBreakRef.current, time)\n  } \n\n  //Reset Pomodoro\n  const resetPomodoro = () => {\n    setDisplayTime(60*25);\n    setBreakTime(60*5);\n    setSessionTime(60*25);\n    setOnBreak(false);\n    setTimerOn(false);\n    if (timeoutRef.current) {\n      timeoutRef.current.cancel();\n    }\n    myAudio.current.pause();\n    myAudio.current.currentTime = 0;\n  }\n\n//Pomodoro settings function\n  const changeTime  = (timeAmmount, type) => {\n    if (type === \"break\") {\n      if ((breakTime >= 60*60 && timeAmmount > 0 ) || (breakTime <= 60 && timeAmmount < 0 ) ) {\n          return;\n        }\n       setBreakTime((prev) => prev + timeAmmount)\n    } else if (type === \"session\") {\n       if ((sessionTime >= 60*60 && timeAmmount > 0 ) || (sessionTime <= 60 && timeAmmount < 0 ) ) {\n          return;\n        }\n      setSessionTime((prev) => prev + timeAmmount);\n      if (!timerOn) {\n        setDisplayTime(sessionTime + timeAmmount);\n      }\n    }\n  }\n\n  //Helper function to display time\n  const formatTime = (time, type=\"display\") => {\n    \n    if (type === \"display\"){ \n    \n    let minutes = Math.floor(time / 60);\n    let seconds = time % 60;\n\n     return (        \n         (minutes < 10 ? \"0\" + minutes : minutes)\n          +\n          \":\"\n          +\n          (seconds < 10 ? \"0\" + seconds : seconds)\n        )\n    } else if (type === \"control\") {\n       let minutes = Math.ceil(time / 60);\n       return minutes\n    }\n  }\n\n  //helper function to play the buzzer\n   const playBuzzer = () => {\n    myAudio.current.currentTime = 0\n    myAudio.current.play()\n  }\n \n\n  return (\n    <React.Fragment>\n    <h1>FreeCodeCamp Pomodoro Clock App</h1>\n    <main>\n      <header>\n        <div className=\"session\">\n          <PomodoroControl \n            type = \"break\"\n            length = {formatTime(breakTime, \"control\")}\n            changeTime = {changeTime}\n          />\n          <PomodoroControl \n            type = \"session\"\n            length = {formatTime(sessionTime, \"control\")}\n            changeTime = {changeTime}\n          />\n        </div>\n      </header>\n      <section>\n        <div className=\"timer\">\n          <p id=\"timer-label\" className=\"title\">{onBreak ? \"Break\" : \"Session\"}</p>\n          <p id=\"time-left\" ref={displayTimerRef}>{formatTime(displayTime)}</p>\n          <span className=\"fill\" style={{height: displayVisualTimerRef.current}}></span>\n        </div>\n        <div className=\"timer_controls\">\n            <button id=\"start_stop\" onClick = {() => timerControl()}>{!timerOn? \"Start\" : \"Pause\"}</button> \n            <button id=\"reset\" onClick = {() => resetPomodoro()}>Reset</button>\n          </div>\n      </section>\n    </main>\n    <audio\n          id=\"beep\"\n          preload=\"auto\"\n          ref={myAudio} \n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n    </React.Fragment>\n  );\n}\n\nexport default App;","export const accurateInterval = function (fn, time) {\r\n  let cancel, nextAt, timeout, wrapper, timeoutID;\r\n  nextAt = new Date().getTime() + time;\r\n  timeout = null;\r\n  wrapper = function () {\r\n    nextAt += time;\r\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime());\r\n    return fn();\r\n  };\r\n  cancel = function () {\r\n    return clearTimeout(timeout);\r\n  };\r\n  timeoutID = function () {\r\n    return timeout;\r\n  };\r\n  timeout = setTimeout(wrapper, nextAt - new Date().getTime());\r\n  return {\r\n    cancel: cancel,\r\n    timeoutID : timeout\r\n  };\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}